[{"/Users/mark.wagner/Dropbox/projects/smartContracts/lottery-react/src/App.js":"1","/Users/mark.wagner/Dropbox/projects/smartContracts/lottery-react/src/reportWebVitals.js":"2","/Users/mark.wagner/Dropbox/projects/smartContracts/lottery-react/src/web3.js":"3","/Users/mark.wagner/Dropbox/projects/smartContracts/lottery-react/src/index.js":"4","/Users/mark.wagner/Dropbox/projects/smartContracts/lottery-react/src/lottery.js":"5"},{"size":2405,"mtime":1611595507822,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1611430938291,"results":"8","hashOfConfig":"7"},{"size":365,"mtime":1611516476829,"results":"9","hashOfConfig":"7"},{"size":500,"mtime":1611430938289,"results":"10","hashOfConfig":"7"},{"size":1167,"mtime":1611518120074,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"oa5gxr",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/mark.wagner/Dropbox/projects/smartContracts/lottery-react/src/App.js",["25"],"// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport web3 from \"./web3\";\nimport lottery from \"./lottery\";\nimport React from \"react\";\n\nfunction App(props) {\n  console.log(web3.version);\n  web3.eth.getAccounts().then(console.log);\n  const [manager, setManager] = React.useState(\"manager\");\n  const [entries, setEntries] = React.useState(\"entries\");\n  const [balance, setBalance] = React.useState(\"balance\");\n  const [value, setValue] = React.useState(\"value\");\n  const [message, setMessage] = React.useState(\"message\");\n\n  React.useEffect(async () => {\n    const manager = await lottery.methods.manager().call();\n    setManager(manager);\n    const entries = await lottery.methods.getPlayers().call();\n    setEntries(entries);\n    const balance = await web3.eth.getBalance(lottery.options.address);\n    setBalance(balance);\n    setValue(\"\");\n    setMessage(\"\");\n  }, []);\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    setMessage(\"Waiting on transaction success...\");\n    const accounts = await web3.eth.getAccounts();\n    await lottery.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei(value, \"ether\"),\n    });\n    setMessage(\"You have been entered!\");\n  };\n\n  const onClick = async (event) => {\n    event.preventDefault();\n    setMessage(\"Picking a winner.....\");\n    const accounts = await web3.eth.getAccounts();\n    await lottery.methods.pickWinner().send({\n      from: accounts[0],\n    });\n    setMessage(\"The winner has been picked!!!\");\n  };\n\n  return (\n    <div>\n      <h2> Lottery Contract </h2>\n      <p>\n        This contract is managed by {manager}\n        <br />\n        <br />\n        There are currently {entries.length} people entered\n        <br />\n        competeing to win {web3.utils.fromWei(web3.utils.toHex(balance))} ether!\n        <br />\n        <hr />\n        <form onSubmit={onSubmit}>\n          <h4> Want to try your luck?</h4>\n          <div>\n            <label> Amount of ether to enter </label>\n            <input\n              value={value}\n              onChange={(event) => setValue(event.target.value)}\n            />\n          </div>\n          <button> Enter </button>\n        </form>\n        <hr />\n        <h4>\n          <button onClick={onClick}> Pick a winner! </button>\n        </h4>\n        <hr />\n        <hr />\n        <hr />\n        <h1> {message}</h1>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n",["26","27"],"/Users/mark.wagner/Dropbox/projects/smartContracts/lottery-react/src/reportWebVitals.js",[],"/Users/mark.wagner/Dropbox/projects/smartContracts/lottery-react/src/web3.js",[],"/Users/mark.wagner/Dropbox/projects/smartContracts/lottery-react/src/index.js",[],"/Users/mark.wagner/Dropbox/projects/smartContracts/lottery-react/src/lottery.js",[],["28","29"],{"ruleId":"30","severity":1,"message":"31","line":16,"column":19,"nodeType":"32","endLine":25,"endColumn":4},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"33","replacedBy":"37"},{"ruleId":"35","replacedBy":"38"},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-native-reassign",["39"],"no-negated-in-lhs",["40"],["39"],["40"],"no-global-assign","no-unsafe-negation"]